<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on FooZhi Blog</title>
    <link>http://localhost:1313/blog/post/</link>
    <description>Recent content in Posts on FooZhi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 06 Apr 2020 18:23:15 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cpu Buses</title>
      <link>http://localhost:1313/blog/2020/cpu-buses/</link>
      <pubDate>Mon, 06 Apr 2020 18:23:15 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/2020/cpu-buses/</guid>
      <description>CPU 总线 分开来说，微处理器，存储器和输入/输出端是有趣的组件，但它们无法做任何有用的事情。组合起来，如果他们可以彼此通信，他们可以形成一个完整的系统。这种通信通过一组信号线束（称为总线）将系统在一起。（In isolation, the microprocessor, the memory and the input/output ports are interesting components, but they cannot do anything useful. In combination, they can form a complete system if they can communicate with each other. This communication is accomplished over bundles of signal wires (known as buses) that connect the parts of the system together.）
任何处理器系统中通常都有三种类型的总线： + 地址总线(address bus)：这决定了处理器从中读取数据或将数据写入的内存中的位置。(this determines the location in memory that the processor will read data from or write data to.</description>
    </item>
    
    <item>
      <title>Java 并发编程</title>
      <link>http://localhost:1313/blog/2020/java-concurrent-programming/</link>
      <pubDate>Mon, 23 Mar 2020 11:58:43 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/2020/java-concurrent-programming/</guid>
      <description>&lt;p&gt;这里汇总一些，Java并发编程相关的知识，推荐一些公认的写的和好的书籍。&lt;strong&gt;提及的知识并非原创、均附有出处链接，详情可以点击进入&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;java-内存模型&#34;&gt;Java 内存模型&lt;/h2&gt;

&lt;p&gt;Java内存模型(Java Mommory Model， JMM)描述了Java编程语言中的线程如何通过内存进行交互。(The Java memory model describes how threads in the Java programming language interact through memory.) &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_memory_model&#34;&gt;jmm from wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;理解Java内存模型，对于编写表现行为正确的并发行为很重要。Java内存模型指定了如何与何时可以看到由其它线程修改过后的共享变量的值，以及，在必要时，如何同步的访问共享变量。（It is very important to understand the Java memory model if you want to design correctly behaving concurrent programs. The Java memory model specifies how and when different threads can see values written to shared variables by other threads, and how to synchronize access to shared variables when necessary.）&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/java-memory-model.html&#34;&gt;Java Memory Model, Jakob Jenkov&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JMM 屏蔽了各种硬件和操作系统的内容访问差异，让Java程序在各种平台下达到了一致的并发效果。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
